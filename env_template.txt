# =============================================================================
# PANGEA FOOD DELIVERY - AI FRIEND SMS SYSTEM
# =============================================================================
#
# PROJECT CONCEPT:
# Pangea is an AI-powered food delivery coordination system that helps college
# students find lunch buddies and save money on delivery fees through group orders.
# 
# The system uses Claude 4 (Anthropic's latest AI model) to act as an "AI Friend"
# that matches users with similar food preferences, negotiates group formations,
# and coordinates the entire ordering process via SMS.
#
# KEY FEATURES:
# - AI-powered user matching based on restaurant preferences and timing
# - Multi-agent negotiation between AI Friends representing different users
# - SMS-based interface using Twilio
# - Firebase backend for user data and order management
# - LangGraph workflow orchestration for complex conversation flows
# - Group payment coordination with Stripe integration
# - ADAPTIVE LEARNING: AI Friends learn and improve over time based on user interactions
#
# AI LEARNING CAPABILITIES & CODE IMPLEMENTATION:
# The learning system is implemented through several key functions in pangea_main.py:
#
# 1. MEMORY STORAGE & RETRIEVAL:
#    - get_user_preferences() [Lines 98-127]: Retrieves stored user data including:
#      * Food preferences and favorite cuisines
#      * Successful matches history
#      * Preferred times and locations
#      * Satisfaction scores from past orders
#
#    - update_user_memory() [Lines 684-753]: Stores new interaction data including:
#      * Interaction type (successful_group_order, no_matches_found, etc.)
#      * Restaurant, location, timing preferences
#      * Group members and satisfaction scores
#      * AI-generated insights from extract_learning_insights()
#
# 2. AI-POWERED INSIGHT EXTRACTION:
#    - extract_learning_insights() [Lines 754-780]: Uses Claude 4 to analyze interactions and extract:
#      * Food preference updates (what they liked/disliked)
#      * Timing insights (when they prefer to eat)
#      * Social preferences (group size, compatibility patterns)
#      * Price sensitivity patterns
#      * Communication style preferences
#
# 3. HISTORICAL COMPATIBILITY LEARNING:
#    - check_historical_compatibility() [Lines 461-476]: Checks if users have successfully
#      ordered together before and returns perfect compatibility score (1.0) if they have
#
# 4. NEGOTIATION STRATEGY LEARNING:
#    - negotiate_with_other_ai() [Lines 501-573]: Uses target user's history to:
#      * Access their preferences via get_user_preferences()
#      * Generate personalized negotiation reasoning
#      * Calculate success probability based on historical patterns
#
# 5. PERSONALIZED COMMUNICATION:
#    - enhance_message_with_context() [Lines 657-683]: Adapts message tone and content based on:
#      * User's past interactions and preferences
#      * Communication style patterns
#      * Previous satisfaction scores
#
# 6. SUCCESS PATTERN RECOGNITION:
#    - update_user_memory() stores successful patterns when satisfaction_score >= 7:
#      * Restaurant preferences that worked well
#      * Optimal group sizes for each user
#      * Timing patterns that led to successful orders
#      * Location preferences and success rates
#
# 7. LEARNING DATA STRUCTURE (Firebase Collections):
#    - 'users' collection: Stores per-user learning data
#      * preferences: Learned food/timing/location preferences
#      * successful_matches: History of successful group formations
#      * interactions: Array of all interactions with AI insights
#      * successful_patterns: Patterns that led to high satisfaction
#      * satisfaction_scores: Historical satisfaction ratings
#
#    - 'negotiations' collection: Stores negotiation attempts for learning
#      * target_user_preferences: Used to improve future negotiations
#      * ai_reasoning: Claude 4's reasoning for each negotiation
#      * success/failure outcomes for pattern recognition
#
#    - 'completed_orders' collection: Stores successful orders for compatibility learning
#      * participants: Users who successfully ordered together
#      * Used by check_historical_compatibility() for future matching
#
# PROJECT FILES:
# - pangea_main.py: Core AI Friend system with matching and negotiation
# - pangea_order_processor.py: Handles order flow after group formation
# - pangea-firebase-key.json: Firebase service account credentials
# - .env: This configuration file (rename this template to .env)
#
# =============================================================================

# =============================================================================
# ANTHROPIC AI CONFIGURATION
# =============================================================================
# Claude 4 API key for the AI Friend's intelligence
# This powers all conversation, matching, and negotiation logic
ANTHROPIC_API_KEY=your_anthropic_api_key_here

# =============================================================================
# TWILIO SMS CONFIGURATION  
# =============================================================================
# Twilio credentials for SMS communication with users
# The AI Friend communicates entirely via SMS through Twilio
TWILIO_ACCOUNT_SID=your_twilio_account_sid_here
TWILIO_AUTH_TOKEN=your_twilio_auth_token_here
TWILIO_PHONE_NUMBER=+1234567890  # Your Twilio phone number for sending SMS

# =============================================================================
# FIREBASE CONFIGURATION
# =============================================================================
# Firebase Firestore database for storing user data, orders, and conversations
# Path to the Firebase service account JSON file
FIREBASE_SERVICE_ACCOUNT_PATH=./pangea-firebase-key.json

# =============================================================================
# STRIPE PAYMENT CONFIGURATION (Optional - for payment links)
# =============================================================================
# Stripe payment links for group delivery fees
# These are pre-created payment links for different group sizes
STRIPE_PAYMENT_LINK_2_PEOPLE=https://buy.stripe.com/cNi00i96U8Uu0qO5nSdwc01
STRIPE_PAYMENT_LINK_3_PEOPLE=https://buy.stripe.com/8x2eVc6YM2w6ddA03ydwc02  
STRIPE_PAYMENT_LINK_4_PEOPLE=https://buy.stripe.com/eVqbJ0gzm3Aa6Pcg2wdwc03

# =============================================================================
# APPLICATION CONFIGURATION
# =============================================================================
# Flask web server configuration for Twilio webhooks
FLASK_ENV=development  # Set to 'production' for live deployment
FLASK_DEBUG=True       # Set to False in production
PORT=8000              # Port for the Flask web server

# =============================================================================
# AI MODEL CONFIGURATION
# =============================================================================
# Claude model settings for optimal performance
ANTHROPIC_MODEL=claude-opus-4-20250514  # Latest Claude 4 model
ANTHROPIC_TEMPERATURE=0.1               # Low temperature for consistent responses
ANTHROPIC_MAX_TOKENS=4096               # Maximum response length

# =============================================================================
# AI LEARNING CONFIGURATION
# =============================================================================
# Settings for the AI Friend's learning and adaptation capabilities
# These control the learning functions in pangea_main.py
ENABLE_LEARNING=True                    # Enable AI learning and adaptation
LEARNING_RETENTION_DAYS=90              # How long to retain learning data
SATISFACTION_THRESHOLD=7.0              # Minimum satisfaction score for positive learning
MAX_LEARNING_PATTERNS=1000              # Maximum patterns to store per user
ENABLE_PERSONALIZATION=True             # Enable personalized communication
ENABLE_PATTERN_RECOGNITION=True         # Enable success pattern recognition
ENABLE_NEGOTIATION_OPTIMIZATION=True    # Enable negotiation strategy learning

# =============================================================================
# SYSTEM BEHAVIOR CONFIGURATION
# =============================================================================
# Timeout settings for order sessions and negotiations
ORDER_SESSION_TIMEOUT_HOURS=2           # How long to keep order sessions active
NEGOTIATION_TIMEOUT_MINUTES=30          # How long to wait for negotiation responses
MAX_SEARCH_ATTEMPTS=3                   # Maximum attempts to find group matches

# =============================================================================
# RESTAURANT CONFIGURATION
# =============================================================================
# Available restaurants and their locations
# These are hardcoded in the system but could be made configurable
RESTAURANT_1=Thai Garden - Student Union
RESTAURANT_2=Mario's Pizza - Campus Center
RESTAURANT_3=Sushi Express - Library Plaza
RESTAURANT_4=Burger Barn - Recreation Center
RESTAURANT_5=Green Bowls - Health Sciences Building

# =============================================================================
# DEPLOYMENT CONFIGURATION
# =============================================================================
# For production deployment
HOST=0.0.0.0           # Host for Flask server
LOG_LEVEL=INFO         # Logging level (DEBUG, INFO, WARNING, ERROR)

# =============================================================================
# SECURITY CONFIGURATION
# =============================================================================
# Security settings for production
SECRET_KEY=your_secret_key_here         # Flask secret key for sessions
ALLOWED_HOSTS=localhost,127.0.0.1       # Allowed hosts for webhooks

# =============================================================================
# MONITORING CONFIGURATION
# =============================================================================
# Optional monitoring and analytics
ENABLE_ANALYTICS=False                  # Enable usage analytics
ENABLE_LOGGING=True                     # Enable detailed logging
LOG_FILE_PATH=./logs/pangea.log         # Log file path

# =============================================================================
# DEVELOPMENT CONFIGURATION
# =============================================================================
# Development-specific settings
ENABLE_MOCK_SMS=False                   # Use mock SMS for testing
ENABLE_MOCK_PAYMENTS=False              # Use mock payments for testing
DEBUG_MODE=True                         # Enable debug features

# =============================================================================
# SETUP INSTRUCTIONS:
# =============================================================================
# 1. Copy this file to .env in your project root
# 2. Replace all "your_*_here" values with actual credentials
# 3. Ensure pangea-firebase-key.json is in the project root
# 4. Install dependencies: pip install -r requirements.txt
# 5. Run the system: python pangea_main.py
#
# REQUIRED SERVICES:
# - Anthropic API account (for Claude 4)
# - Twilio account (for SMS)
# - Firebase project (for database)
# - Stripe account (for payments, optional)
#
# ============================================================================= 